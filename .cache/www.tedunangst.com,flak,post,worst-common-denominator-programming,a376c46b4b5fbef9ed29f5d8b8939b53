status: 200
content-length: 16387
content-location: http://www.tedunangst.com/flak/post/worst-common-denominator-programming
vary: Cookie
server: nginx
connection: keep-alive
-content-encoding: gzip
cache-control: max-age=60
date: Wed, 23 Apr 2014 12:15:48 GMT
content-type: text/html; charset=utf-8

<html>
<head>
<link href="/flak/rss" rel="alternate" type="application/rss+xml" title="flak rss">
<style>
body {background-color: #fcf4e8;font-size: 1.0em;color: #121;}a {text-decoration: none;color: #181;}a:hover {color: #1c1;}h1, h2, h3, .sidebar, .topbar, .sf {font-family: sans-serif;}img {max-width: 100%;}.main {margin: 0 auto;max-width:960px;}.content {width: 70%;float:left;}.sidebar {width: 25%;float: right;}.toc {padding: 2px;bottom: 0;position: fixed;background: #121;color: #fcf4e8;opacity: 0.4;}.toc a {color: #fcf4e8;}.toc:hover {opacity: 1.0;}.post {border-bottom: 1px dotted gray;}.post p a:hover {text-decoration: underline;}.topbar {background-color: #ece4d4;padding: 4px;}.topbar form {float: right;}.code {white-space: pre-wrap;word-wrap: break-word;font-family: monospace;background-color: #ece4d4;}span.code {padding: 0.1em;}div.code {padding: 1em;}.comment {margin-left: 10%;width: 70%;border-top: dotted gray 1px;}.linklike {border-bottom: 1px dotted;cursor: pointer;}.sf {font-size: 0.8em;}.fr {float: right;}@media screen and (max-device-width: 480px) {body {font-size: 2.2em;}div.code {font-size: 0.5em;}}@media screen and (min-device-width: 481px) and (-webkit-min-device-pixel-ratio: 2) {body {font-size: 1.4em;}}@media screen and (max-width:980px) {.content {width: 95%;}.sidebar {width: 95%;float: left;}.sidebar div {float: left;}}@media screen and (min-width:1240px) {body {font-size: 1.2em;}.main {max-width: 1200px;}}@media screen and (min-width:1620px) {body {font-size: 1.4em;}.main {max-width: 1600px;}}
</style>
<title>
worst common denominator programming
</title>
</head>
<body>
<div class="main">
<div class="topbar">
guest<form action="/flak/search" method="GET"><input name="t" ></form>
</div>
<div class="content">
<div class="post">
<a name="top"></a>
<h2><a href="/flak/post/worst-common-denominator-programming">worst common denominator programming</a></h2>
<div>
<p>
The common way to approach software portability is to establish a baseline and then program to that least common denominator. The portability layers in OpenSSL, however, go way beyond least. This is a fully realized experiment in <i>worst common denominator programming</i>. Some examples.<p>
<a name="strlcpy"></a><h4>strlcpy</h4><p>
Let’s start with a fair replacement. There are still some lesser operating systems that lack <i>strlcpy</i>, so including an implementation for them is reasonable. At least <i>OPENSSL_strlcpy</i> is a compatible implementation with the real strlcpy. Perfect example of least common denominator compatibility. (I have a strong preference for omitting the namespace prefix in cases like this, only including the replacement code when necessary, but it is what it is.)<p>
<a name="issetugid"></a><h4>issetugid</h4><p>
A setuid program (and its libraries) is in a tricky situation. It has some privileges it may need, but many it won’t, and it’s running in a hostile environment. It needs to avoid accidentally opening files it shouldn’t like <i>/etc/passwd</i>. OpenSSL checks for this with a function called <i>OPENSSL_issetugid</i>. On OpenBSD and FreeBSD, it’s a call to the real <i>issetugid</i> function, which is a system call. issetugid needs to be a syscall; you can at best only emulate it poorly in userland. Providing a wrapper that does what it can may be better than nothing, although it can also lead to a false sense of security. If you can’t do it right, at least do it wrong...? The real problem here though is that OpenBSD and FreeBSD are not the only ones with issetugid. Even bad operating systems get better over time, but ineffective wrapper functions don’t.<p>
(Simply checking current euid and ruid is insufficient. The running program may still have file handles open to sensitive files or the contents of those files still in memory. Once privileged, always privileged.)<p>
<a name="snprintf"></a><h4>snprintf</h4><p>
The real <i>snprintf</i> returns the number of characters it wanted to print, regardless of buffer size. The imitation <i>BIO_snprintf</i> returns the number of characters printed, unless truncation occurs, in which case it returns -1. So they’re mostly the same, except in those situations where bad things like overflow are happening, in which case normal C programmers need to remember that OpenSSL C is not normal.<p>
<div class="code"><span style="color: #008000; font-weight: bold">if</span> (BIO_snprintf(buf,<span style="color: #008000; font-weight: bold">sizeof</span> buf,<span style="color: #BA2121">&quot;%s_default&quot;</span>,v<span style="color: #666666">-&gt;</span>name) <span style="color: #666666">&gt;=</span> (<span style="color: #B00040">int</span>)<span style="color: #008000; font-weight: bold">sizeof</span>(buf))</div><p>
That’s how one checks real snprintf for truncation, but not BIO_snprintf! Ironically, the code would have worked even so, because -1 implicitly converted to size_t is going to be quite large, but then somebody went full retard and cast sizeof to int. <b>Never do this.</b> (The cast would be mostly harmless with real snprintf. Only the combination of wrapper and cast cause the error. The planets must have been in alignment. Still, don’t cast <span class="code">sizeof</span>.)<p>
<a name="isservice"></a><h4>isservice</h4><p>
There is a function named <i>OPENSSL_isservice</i> which returns whether the current process is a Windows Service. It’s actually used in various places, to decide whether to print an error or display a MessageBox. Call me crazy, but shouldn’t that be something the application would handle? Why does <i>this</i> library need to make such decisions? We can abstract this, therefore we must! Or maybe I’m just not seeing the potential here and what’s missing is a <i>OPENSSL_iscronjob</i> function to decide between printing messages to stderr or syslog.<p>
<a name="memcmp"></a><h4>memcmp</h4><p>
For all those operating systems lacking fancy functions like <i>memcmp</i>, OpenSSL provides a replacement. Two, actually. <i>CRYPTO_memcmp</i> is a constant time function designed to prevent timing side channels, which is quite useful. There’s also <i>OPENSSL_memcmp</i>. Now, considering that <i>OPENSSL_malloc</i> calls <i>CRYPTO_malloc</i>, you might think <i>OPENSSL_memcmp</i> would call <i>CRYPTO_memcmp</i>. Incorrect. OPENSSL_memcmp is a naive implementation that exits as soon as a mismatch occurs. You need to remember not only to call the wrapper (fair), but which wrapper to call (unfair). Make a mistake, and you’ve just introduced a side channel attack.<p>
<a name="NULL"></a><h4>NULL</h4><p>
The code wrappers also can’t quite figure what their <span class="code">NULL</span> argument policy is going to be. Unlike their real world counterparts, functions like <i>OPENSSL_realloc</i> and <i>OPENSSL_free</i> apparently can’t handle NULL so you see tons of code like this hypothetical example:<p>
<div class="code"><span style="color: #008000; font-weight: bold">if</span> (ptr <span style="color: #666666">==</span> <span style="color: #008000">NULL</span>)
        ptr <span style="color: #666666">=</span> OPENSSL_malloc(len);
<span style="color: #008000; font-weight: bold">else</span>
        ptr <span style="color: #666666">=</span> OPENSSL_realloc(ptr, len);
<span style="color: #008000; font-weight: bold">if</span> (ptr <span style="color: #666666">!=</span> <span style="color: #008000">NULL</span>)
        OPENSSL_free(ptr);</div><p>
which could be collapsed to the much simpler:<p>
<div class="code">ptr <span style="color: #666666">=</span> realloc(ptr, len);
free(ptr);</div><p>
On the other hand, the <i>OPENSSL_strdup</i> wrapper <i>does</i> handle NULL, unlike the real strdup. It may be sensible to upgrade all the standard functions to handle NULL to simplify some callers, but that doesn’t explain why other much more frequently used functions were downgraded!<p>
(Bonus fact)<p>
<div class="code"><span style="color: #408080; font-style: italic">/* realloc failure implies the original data space is b0rked too! */</span></div><p>
<a name="VMS"></a><h4>VMS</h4><p>
If you’re not familiar with it, OpenVMS was a partially successful communist plot to destroy the POSIX standard. It’s not related to the OpenBSD project.<p>
<div class="code"><span style="color: #BC7A00"># if defined(OPENSSL_SYS_VMS)</span>
        <span style="color: #408080; font-style: italic">/* 2011-02-18 SMS.</span>
<span style="color: #408080; font-style: italic">         * VMS ioctl() can&#39;t tolerate a 64-bit &quot;void *arg&quot;, but we</span>
<span style="color: #408080; font-style: italic">         * observe that all the consumers pass in an &quot;unsigned long *&quot;,</span>
<span style="color: #408080; font-style: italic">         * so we arrange a local copy with a short pointer, and use</span>
<span style="color: #408080; font-style: italic">         * that, instead.</span>
<span style="color: #408080; font-style: italic">         */</span>
<span style="color: #BC7A00">#  if __INITIAL_POINTER_SIZE == 64</span>
<span style="color: #BC7A00">#   define ARG arg_32p</span>
<span style="color: #BC7A00">#   pragma pointer_size save</span>
<span style="color: #BC7A00">#   pragma pointer_size 32</span>
        <span style="color: #B00040">unsigned</span> <span style="color: #B00040">long</span> arg_32;
        <span style="color: #B00040">unsigned</span> <span style="color: #B00040">long</span> <span style="color: #666666">*</span>arg_32p;
<span style="color: #BC7A00">#   pragma pointer_size restore</span>
        arg_32p <span style="color: #666666">=</span> <span style="color: #666666">&amp;</span>arg_32;
        arg_32 <span style="color: #666666">=</span> <span style="color: #666666">*</span>((<span style="color: #B00040">unsigned</span> <span style="color: #B00040">long</span> <span style="color: #666666">*</span>) arg);</div><p>
You can try to puzzle out the method behind the madness, but it’s easier to rewrite it.<p>
<div class="code">#pragma summon cthulhu
</div><p>
This is really the worst of the worst. The OpenSSL dev team should have told HP to shove it and fix the bugs in their damn OS. The bizarro workarounds for Win16 I can understand because they come from an era when companies didn’t make patches and users didn’t apply them. (Why they remain in the code to this day is another matter.) But nobody should be working around 64-bit VMS problems. Demand better. HP is paid handsomely to maintain their abomination of an operating system; let them maintain it.<p>
Instead of using their considerable political capital as a phenomenally successful (practically “must run”) piece of software to leverage fixes out of HP, the OpenSSL devs went and internalized the brain damage into their own project. Now HP has less incentive to do their job, and countless (but hopefully a dwindling few) other projects will run into the same issue.<p>
<a name="consequences"></a><h4>consequences</h4><p>
<div class="code">&lt;beck> you know it's going to be good when the function starts with: 
&lt;beck>        char buf[288 + 1], tmp[20], str[128 + 1];
</div><p>
Understanding an alien codebase is always difficult. Rewriting a function for clarity often involves deciding between “should do what it looks like it does” or “should do what it actually does”.  This is a special kind of unpossible challenge when all the functions being called are just like the functions you know, except when they’re not. The most consistent thing in OpenSSL is that every standard function will be wrapped or reimplemented in some way, and the wrappers will be almost identical, but <b>every one must be subtly different</b>.<p>
The NFS code in OpenBSD is fraught with peril and relies upon evil, evil macros like <span class="code">nfsm_mtofh</span> which modify local variables that aren’t even parameters, but the one good thing I can say is that when I read code using that macro, I’m never confused into thinking it’s just an alias for the standard C function <span class="code">mtofh</span>.<p>
For more reading, consider all the <a href="http://www.exploringbinary.com/how-strtod-works-and-sometimes-doesnt/">bad things that happen when projects include their own strtod</a>. The standard C library implementation is going to improve and incorporate fixes faster than your lazily maintained half forgotten copy of some code scraped off usenet.<p>
<a name="addendum"></a><h4>addendum</h4><p>
Any one or two dozen compat hacks would be understandable. As would the diabolical brace formatting. Or the dreadful (in the sense of literally inspiring dread) comments:<p>
<div class="code"><span style="color: #408080; font-style: italic">/* The reason I have implemented this instead of using sscanf is because</span>
<span style="color: #408080; font-style: italic"> * Visual C 1.52c gives an unresolved external when linking a DLL :-( */</span></div><p>
(Yes, you are running that code. Even on unix. OpenSSL uses it everywhere.)<p>
But taken all together, it’s like “drowning in an ocean composed of pufferfish that are pregnant with tiny Freddy Kruegers -- each detail is horrendous in isolation, but the aggregate sum is delightfully arranged into a hate flower that blooms all year.” If you haven’t read <a href="https://www.usenix.org/system/files/1403_02-08_mickens.pdf">James Mickens’s last column <i>To Wash It All Away</i></a> (do so!), practically the whole thing could be adapted to OpenSSL with about five minutes of editing.<p>
Every old codebase contains the scarred remains of yesteryear’s battles, but the problems here are so many and so varied, they’re fractal in nature. Nevertheless, buried somewhere in here are all the valuable hacks that make the difference between a spec TLS stack and a working TLS stack.<p>

</div>
<div class="sf">
Posted 2014-04-22 07:34:04 by tedu Updated: 2014-04-22 07:34:04<br>
Tagged: <a href="/flak/tag/c">c</a> <a href="/flak/tag/programming">programming</a><br>
</div>



</div>

<div style="margin-bottom: 2em"></div>
<div class="toc">
<a href="#top">top</a>

- <a href="#strlcpy">strlcpy</a>

- <a href="#issetugid">issetugid</a>

- <a href="#snprintf">snprintf</a>

- <a href="#isservice">isservice</a>

- <a href="#memcmp">memcmp</a>

- <a href="#NULL">NULL</a>

- <a href="#VMS">VMS</a>

- <a href="#consequences">consequences</a>

- <a href="#addendum">addendum</a>

</div>


</div>
<div class="sidebar">
<h1><a href="/flak/">flak</a></h1>
<div>
<h3>recent [<a href="/flak/rss">rss</a>]</h3>
<ul>
 <li><a href="/flak/post/origins-of-libressl">origins of libressl</a>
 <li><a href="/flak/post/worst-common-denominator-programming">worst common denominator programming</a>
 <li><a href="/flak/post/xenoanthropology">xenoanthropology</a>
 <li><a href="/flak/post/analysis-of-d2i-X509-reuse">analysis of d2i_X509 reuse</a>
 <li><a href="/flak/post/snowden-and-putin-have-a-chat">snowden and putin have a  chat</a>
 <li><a href="/flak/post/ten-year-reunions">ten year reunions</a>
 <li><a href="/flak/post/please-do-not-poke-the-bears">please do not poke the bears</a>
 <li><a href="/flak/post/analysis-of-openssl-freelist-reuse">analysis of openssl freelist reuse</a>
 <li><a href="/flak/post/heartbleed-vs-mallocconf">heartbleed vs malloc.conf</a>
 <li><a href="/flak/post/are-you-now-or-have-you-ever-been-a-homophobe">are you now or have you ever been a homophobe?</a>

</ul>
</div>

<div>
<h3>tags</h3>
<ul>
 <li><a href="/flak/tag/software">software</a>
 <li><a href="/flak/tag/programming">programming</a>
 <li><a href="/flak/tag/rants">rants</a>
 <li><a href="/flak/tag/openbsd">openbsd</a>
 <li><a href="/flak/tag/thoughts">thoughts</a>
 <li><a href="/flak/tag/review">review</a>
 <li><a href="/flak/tag/security">security</a>
 <li><a href="/flak/tag/web">web</a>
 <li><a href="/flak/tag/c">c</a>
 <li><a href="/flak/tag/computers">computers</a>
 <li><a href="/flak/tag/gadget">gadget</a>
 <li><a href="/flak/tag/moviereview">moviereview</a>
 <li><a href="/flak/tag/magreview">magreview</a>
 <li><a href="/flak/tag/bugs">bugs</a>
 <li><a href="/flak/tag/business">business</a>
 <li><a href="/flak/tag/mailfail">mailfail</a>
 <li><a href="/flak/tag/quote">quote</a>
 <li><a href="/flak/tag/philly">philly</a>
 <li><a href="/flak/tag/flak">flak</a>
 <li><a href="/flak/tag/politics">politics</a>

</ul>
</div>

</div>
</div>

</body>
</html>
