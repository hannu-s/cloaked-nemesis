status: 200
content-length: 33618
content-location: http://devio.us/~dv/a-quick-look-at-haskell.html
accept-ranges: bytes
server: Apache
last-modified: Wed, 23 Apr 2014 11:02:56 GMT
etag: "c48c6478feaa6bdc8c0b176f77b5cb6b2ea85096"
date: Wed, 23 Apr 2014 12:15:49 GMT
content-type: text/html

<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<title>A Quick Look at Haskell</title>
<!-- 2014-04-23 Wed 13:03 -->
<meta  http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta  name="generator" content="Org-mode" />
<meta  name="author" content="Denis Volk" />
<meta  name="description" content="A look at the functional programming language Haskell"
 />
<meta  name="keywords" content="haskell tutorial" />
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center; }
  .todo   { font-family: monospace; color: red; }
  .done   { color: green; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  pre.src-sh:before    { content: 'sh'; }
  pre.src-bash:before  { content: 'sh'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-R:before     { content: 'R'; }
  pre.src-perl:before  { content: 'Perl'; }
  pre.src-java:before  { content: 'Java'; }
  pre.src-sql:before   { content: 'SQL'; }

  table { border-collapse:collapse; }
  td, th { vertical-align:top;  }
  th.right  { text-align: center;  }
  th.left   { text-align: center;   }
  th.center { text-align: center; }
  td.right  { text-align: right;  }
  td.left   { text-align: left;   }
  td.center { text-align: center; }
  dt { font-weight: bold; }
  .footpara:nth-child(2) { display: inline; }
  .footpara { display: block; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  /*]]>*/-->
</style>
<link rel="stylesheet" type="text/css" href="mixed-tut.css" />
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2013 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id="content">
<h1 class="title">A Quick Look at Haskell</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Environment</a></li>
<li><a href="#sec-2">2. Types</a></li>
<li><a href="#sec-3">3. Functions</a>
<ul>
<li><a href="#sec-3-1">3.1. Let</a></li>
<li><a href="#sec-3-2">3.2. Partial application</a></li>
<li><a href="#sec-3-3">3.3. Composition</a></li>
<li><a href="#sec-3-4">3.4. Anonymous functions</a></li>
<li><a href="#sec-3-5">3.5. Higher-order functions</a></li>
</ul>
</li>
<li><a href="#sec-4">4. Algebraic Data Types</a>
<ul>
<li><a href="#sec-4-1">4.1. Sum types</a></li>
<li><a href="#sec-4-2">4.2. Product types</a></li>
<li><a href="#sec-4-3">4.3. Named data constructor parameters</a></li>
<li><a href="#sec-4-4">4.4. Type constructor parameters</a></li>
<li><a href="#sec-4-5">4.5. Compound example</a></li>
<li><a href="#sec-4-6">4.6. Data constructor parameter namespace</a></li>
<li><a href="#sec-4-7">4.7. Data constructor named parameters are functions</a></li>
<li><a href="#sec-4-8">4.8. Updating values with named constructor parameters</a></li>
<li><a href="#sec-4-9">4.9. Recursive data types</a></li>
</ul>
</li>
<li><a href="#sec-5">5. Lists</a></li>
<li><a href="#sec-6">6. Tuples</a></li>
<li><a href="#sec-7">7. If and case</a></li>
<li><a href="#sec-8">8. Deconstructing values</a></li>
<li><a href="#sec-9">9. Parametric polymorphism</a></li>
<li><a href="#sec-10">10. Typeclasses</a>
<ul>
<li><a href="#sec-10-1">10.1. Standard typeclasses</a></li>
<li><a href="#sec-10-2">10.2. Automatic deriving</a></li>
<li><a href="#sec-10-3">10.3. Show &amp; Read</a></li>
</ul>
</li>
<li><a href="#sec-11">11. IO</a>
<ul>
<li><a href="#sec-11-1">11.1. Example: Echoing input line</a></li>
<li><a href="#sec-11-2">11.2. Example: Guess the number</a></li>
<li><a href="#sec-11-3">11.3. Do notation</a></li>
<li><a href="#sec-11-4">11.4. Looping</a></li>
<li><a href="#sec-11-5">11.5. Concurrent IO</a></li>
</ul>
</li>
<li><a href="#sec-12">12. More</a></li>
</ul>
</div>
</div>
<div id="corner-to-index">
  <p id="index-text-p">
    <a id="index-text-1" href="./index.html">Index</a> 
    <a id="index-text-2" href="https://github.com/dvolk/site">Edit</a>
    <a id="index-text-3" href="mailto:denis.volk@gmail.com">Contact</a>
  </p>
</div>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Environment</h2>
<div class="outline-text-2" id="text-1">
<p>
Haskell is defined in the <a href="https://www.haskell.org/onlinereport/haskell2010/">Haskell Report</a>.
</p>

<p>
The most used compiler is <a href="https://www.haskell.org/ghc/download">GHC</a> (debian package <code>ghc</code>, <code>ghc-doc</code>).
</p>

<p>
Haskell projects are typically built and packaged using <a href="https://www.haskell.org/cabal/">Cabal</a> (<code>cabal-install</code>).
</p>

<p>
There is an online package repository called <a href="https://hackage.haskell.org/">Hackage</a>.
</p>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Types</h2>
<div class="outline-text-2" id="text-2">
<pre class="example">
"Hello " ++ " World"
</pre>

<p>
is an <b>expression</b>. Its <b>value</b> is
</p>

<pre class="example">
"Hello World"
</pre>

<p>
Its <b>type</b> is
</p>

<pre class="example">
String
</pre>

<p>
Types are declared using the reserved operator <code>::</code> (read as "has type")
</p>

<pre class="example">
xs = "Hello World" :: String
</pre>

<p>
Here <code>xs</code> is a <b>variable</b>.
</p>

<p>
Variables and types names are  case sensitive. Variable names begin with
a lowercase character and type names begin with an uppercase character.
</p>

<p>
Type declarations  are optional.  In their  absence, Haskell  will infer
the types. If it can't, you'll be asked to provide them.
</p>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Functions</h2>
<div class="outline-text-2" id="text-3">
<p>
Defining and calling functions is very simple
</p>

<pre class="example">
addTwoLengths :: String -&gt; String -&gt; Int
addTwoLengths xs ys = length xs + length ys
</pre>

<p>
A function can be defined for different arguments (the order in which
the definitions are written is important)
</p>

<pre class="example">
fac :: Int -&gt; Int
fac 1 = 1
fac n = n * fac (n - 1)
</pre>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> Let</h3>
<div class="outline-text-3" id="text-3-1">
<p>
We can define local variables with <code>let</code> &#x2026; <code>in</code> &#x2026;
</p>

<pre class="example">
squaredDistance :: Int -&gt; Int -&gt; Int -&gt; Int -&gt; Int
squaredDistance x1 y1 x2 y2 =
  let dx = x1 - x2
      dy = y1 - y2
  in dx ^ 2 + dy ^ 2
</pre>
</div>
</div>
<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> Partial application</h3>
<div class="outline-text-3" id="text-3-2">
<p>
A function can be partially applied, creating a new function
</p>

<pre class="example">
sdFrom11 :: Int -&gt; Int -&gt; Int
sdFrom11 = squaredDistance 1 1

sdFrom11 4 4 :: Int
</pre>
</div>
</div>
<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> Composition</h3>
<div class="outline-text-3" id="text-3-3">
<p>
Two functions can be composed, creating a new function
</p>

<pre class="example">
f = fac . length :: String -&gt; Int
</pre>

<p>
is the same as
</p>

<pre class="example">
f n = fac (length n) :: String -&gt; Int
</pre>
</div>
</div>
<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4"><span class="section-number-3">3.4</span> Anonymous functions</h3>
<div class="outline-text-3" id="text-3-4">
<p>
We can define an anonymous function (<b>lambda</b>) with <code>\args</code> <code>-&gt;</code> <code>body</code>
</p>

<pre class="example">
doubleLength = (\n -&gt; n * 2) . length
</pre>
</div>
</div>
<div id="outline-container-sec-3-5" class="outline-3">
<h3 id="sec-3-5"><span class="section-number-3">3.5</span> Higher-order functions</h3>
<div class="outline-text-3" id="text-3-5">
<p>
It's  possible to  pass functions  as  arguments to  functions and  have
functions  return functions.  
</p>

<p>
For example,  <code>map</code> transforms a  list by  applying a function  to every
element.
</p>

<pre class="example">
map (\n -&gt; n + 1) [1,2,3]
</pre>

<pre class="example">
        ┌-&lt;-&lt;-&lt;-&lt;-&lt;-┐
        |           |
        v           |

map :: (a -&gt; b) -&gt; [a] -&gt; [b]

       ^^^^^^^^    ^^^    ^^^--- [2,3,4]
          |         |
          |         └--- [1,2,3]
     \n -&gt; n + 1
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Algebraic Data Types</h2>
<div class="outline-text-2" id="text-4">
</div><div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1"><span class="section-number-3">4.1</span> Sum types</h3>
<div class="outline-text-3" id="text-4-1">
<p>
The simplest example of a sum type is
</p>

<pre class="example">
data Bool = True 
          | False
</pre>

<p>
Bool value is either <code>True</code> or <code>False</code>.
</p>

<pre class="example">
x = True :: Bool
</pre>
</div>
</div>
<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2"><span class="section-number-3">4.2</span> Product types</h3>
<div class="outline-text-3" id="text-4-2">
<p>
A product type is defined as
</p>

<pre class="example">
data Person = Person String Int

     ^^^^^^   ^^^^^^ ^^^^^^ ^^^
       |        |      |     |
       |        |      └-----┴----- data constructor parameters
       |        |
       |        └-- data constructor
       |
       └-- type constructor
</pre>

<p>
The <code>Person</code> on the left side is the <b>type constructor</b>. The <code>Person</code> on
the right side  is the <b>data constructor</b>. These don't  have to have the
same  name,  but they  often  do,  to  the  chagrin of  Haskell  newbies
everywhere.
</p>

<p>
To create a value of type <code>Person</code>, use the <code>Person</code> data constructor:
</p>

<pre class="example">
p :: Person
p = Person "Morty" 22
</pre>
</div>
</div>
<div id="outline-container-sec-4-3" class="outline-3">
<h3 id="sec-4-3"><span class="section-number-3">4.3</span> Named data constructor parameters</h3>
<div class="outline-text-3" id="text-4-3">
<p>
Data constructor parameters can be named
</p>

<pre class="example">
data Person = Person
  { name :: String
  , age  :: Int
  }
</pre>

<p>
then an alternative way to create a <code>Person</code> is to write
</p>

<pre class="example">
p = Person { name = "Morthy"
           , age  = 22
           }
</pre>
</div>
</div>
<div id="outline-container-sec-4-4" class="outline-3">
<h3 id="sec-4-4"><span class="section-number-3">4.4</span> Type constructor parameters</h3>
<div class="outline-text-3" id="text-4-4">
<p>
Type constructors can have parameters
</p>

<pre class="example">
data Maybe a = Nothing
             | Just a
</pre>

<p>
where <code>a</code> is a type.
</p>

<pre class="example">
greeting = Just "Hello" :: Maybe String
name     = Nothing      :: Maybe String
</pre>
</div>
</div>
<div id="outline-container-sec-4-5" class="outline-3">
<h3 id="sec-4-5"><span class="section-number-3">4.5</span> Compound example</h3>
<div class="outline-text-3" id="text-4-5">
<p>
For example, a ship may or may not have a captain
</p>

<pre class="example">
data Ship = Ship
  { shipName :: String
  , captain  :: Maybe Person
  }
</pre>

<p>
We can make a Ship with one
</p>

<pre class="example">
s1 = Ship { shipName = "Queen Elizabeth 2"
         , captain = Just ( Person "William Cooper" 50 )
         }
</pre>

<p>
And one without
</p>

<pre class="example">
s2 = Ship { shipName = "Dinghy"
         , captain = Nothing }
         }
</pre>
</div>
</div>
<div id="outline-container-sec-4-6" class="outline-3">
<h3 id="sec-4-6"><span class="section-number-3">4.6</span> Data constructor parameter namespace</h3>
<div class="outline-text-3" id="text-4-6">
<p>
In the above example, <code>Person</code> had  a <code>name</code> parameter, but <code>Ship</code> had a
<code>shipName</code> parameter. This is  because data constructor parameters share
one namespace and  cannot be reused in different data  types. And that's
because&#x2026;
</p>
</div>
</div>
<div id="outline-container-sec-4-7" class="outline-3">
<h3 id="sec-4-7"><span class="section-number-3">4.7</span> Data constructor named parameters are functions</h3>
<div class="outline-text-3" id="text-4-7">
<p>
These are automatically generated for you
</p>

<pre class="example">
name :: Person -&gt; String
age  :: Person -&gt; Int

shipName :: Ship -&gt; Maybe String
captain  :: Ship -&gt; Maybe Person
</pre>

<p>
Different functions (in the same module) can't have the same name.
</p>
</div>
</div>
<div id="outline-container-sec-4-8" class="outline-3">
<h3 id="sec-4-8"><span class="section-number-3">4.8</span> Updating values with named constructor parameters</h3>
<div class="outline-text-3" id="text-4-8">
<p>
We can take an existing data  type with named constructor parameters and
update it. For example, to remove the captain from <code>s1</code> above
</p>

<pre class="example">
s3 = s1 { captain = Nothing }
</pre>

<p>
This creates a new copy of <code>s1</code>, <code>s3</code>, changing the parameters supplied.
</p>
</div>
</div>
<div id="outline-container-sec-4-9" class="outline-3">
<h3 id="sec-4-9"><span class="section-number-3">4.9</span> Recursive data types</h3>
<div class="outline-text-3" id="text-4-9">
<p>
data type definitions can be recursive
</p>

<pre class="example">
data List a = Nil
            | Append a (List a)
</pre>

<p>
a <code>List</code> of <code>a</code> is then either <code>Nil</code> (empty list) or an element of type
<code>a</code> appended to a <code>List</code> of type <code>a</code>.
</p>

<pre class="example">
l :: List Int
l = Append 1 (Append 2 (Append 3 (Append 4 Nil)))
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Lists</h2>
<div class="outline-text-2" id="text-5">
<p>
Lists are a  built-in recursive data type. They're  constructed with the
cons operator "<code>:</code>"
</p>

<pre class="example">
1 : ( 2 : ( 3 : ( 4 : [] )))
</pre>

<p>
Haskell provides an easier way to write the above
</p>

<pre class="example">
[1, 2, 3, 4] :: [Int]
</pre>

<p>
A <code>String</code> is a list of <code>Char</code>
</p>

<pre class="example">
s = "Hello World" :: [Char]
</pre>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> Tuples</h2>
<div class="outline-text-2" id="text-6">
<p>
A tuple is a fixed size container. Unlike lists, a tuple may contain
different types
</p>

<p>
for example
</p>

<pre class="example">
("Proxima Centauri", 3, 4, 5) :: (String, Int, Int, Int)
</pre>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> If and case</h2>
<div class="outline-text-2" id="text-7">
<p>
<code>if</code> &#x2026; <code>then</code> &#x2026; <code>else</code> &#x2026; is an expression. The <code>else</code> is mandatory
(what value would the expression evaluate to if it wasn't?)
</p>

<pre class="example">
describeIntSign :: Int -&gt; String
describeIntSign n =
  if n &gt; 0 
    then "positive"
    else "negative"
</pre>

<p>
<code>case</code> &#x2026; <code>of</code> &#x2026;  is also an expression, but a  bit more general than
<code>if</code>.
</p>

<pre class="example">
describeInt :: Int -&gt; String
describeInt n =
  case n of
    0 -&gt; "zero"
    1 -&gt; "one"
    2 -&gt; "two"
    _ -&gt; "I don't know that number"
</pre>
</div>
</div>
<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> Deconstructing values</h2>
<div class="outline-text-2" id="text-8">
<p>
Data type values can be  deconstructed with pattern matching in function
arguments
</p>

<pre class="example">
data Person = Person
  { name :: Maybe String 
  , age  :: Int 
  }

nonsense :: Person -&gt; Int
nonsense (Person  Nothing a) = a
nonsense (Person (Just n) a) = length n + a
</pre>

<p>
here  <code>n</code>  and <code>a</code>  will  be  locally bound  to  <code>name</code>  (when it  isn't
<code>Nothing</code>) and <code>age</code> of the person.
</p>

<p>
We can also pattern match in case expressions
</p>

<pre class="example">
case p of
  Person  Nothing a -&gt; "This person doesn't have a name"
  Person (Just n) a -&gt; "This person's name is " ++ n
</pre>

<p>
and let expressions
</p>

<pre class="example">
let (Person _ a) = p in a + 1
</pre>

<p>
use <code>_</code> to indicate that you don't care about a parameter.
</p>

<p>
Lists and tuples can also be pattern matched.
</p>

<pre class="example">
headIntList :: [Int] -&gt; Int
head (first:rest) = first

      ^^^^^^^^^^
          |
  recall, a list is an element appended (:'ed) to the rest of the list

swapPair :: (Int, Int) -&gt; (Int, Int)
swapPair (x, y) = (y, x)
</pre>
</div>
</div>
<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9"><span class="section-number-2">9</span> Parametric polymorphism</h2>
<div class="outline-text-2" id="text-9">
<p>
Defining a new function for each type of list like above would be silly.
Haskell allows us to write generic/polymorphic functions.
</p>

<pre class="example">
         ┌-- type variables, a is any type
         |
         ├-----┐
         |     |
         v     v

head :: [a] -&gt; a
head (first:rest) = first

swap :: (a, b) -&gt; (b, a)
swap (a, b) = (b, a)
</pre>

<p>
type variables are always lowercase.
</p>
</div>
</div>
<div id="outline-container-sec-10" class="outline-2">
<h2 id="sec-10"><span class="section-number-2">10</span> Typeclasses</h2>
<div class="outline-text-2" id="text-10">
<p>
Typeclasses allow you to overload functions
</p>

<pre class="example">
class Eq a where
  (==) :: a -&gt; a -&gt; Bool
</pre>

<p>
types are instances of typeclasses
</p>

<pre class="example">
instance Eq Char where
  (==) = ...
</pre>
</div>

<div id="outline-container-sec-10-1" class="outline-3">
<h3 id="sec-10-1"><span class="section-number-3">10.1</span> Standard typeclasses</h3>
<div class="outline-text-3" id="text-10-1">
<p>
You can make your own, but Haskell already defines many typeclasses
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">typeclass</th>
<th scope="col" class="left">functions</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">Eq</td>
<td class="left"><code>(==)</code>, <code>(/=)</code></td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">Ord</td>
<td class="left"><code>(&lt;)</code>, <code>(&lt;=)</code>, <code>(&gt;=)</code>, <code>(&gt;)</code>, <code>max</code>, <code>min</code></td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">Enum</td>
<td class="left"><code>succ</code>, <code>pred</code>, <code>toEnum</code>, <code>fromEnum</code>, <code>enumFrom</code>, <code>enumFromThen</code>, <code>enumFromTo</code>, <code>enumFromThenTo</code></td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">Num</td>
<td class="left"><code>(+)</code>, <code>(-)</code>, <code>(⋆)</code>, <code>negate</code>, <code>abs</code>, <code>signum</code>, <code>fromInteger</code></td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">Real</td>
<td class="left"><code>toRational</code></td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">Integral</td>
<td class="left"><code>quot</code>, <code>rem</code>, <code>div</code>, <code>mod</code>, <code>quotRem</code>, <code>divMod</code>, <code>toInteger</code></td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">Fractional</td>
<td class="left"><code>(/)</code>, <code>recip</code>, <code>fromRational</code></td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">Floating</td>
<td class="left"><code>pi</code>, <code>exp</code>, <code>log</code>, <code>sqrt</code>, <code>(⋆⋆)</code>, <code>logBase</code>, <code>sin</code>, <code>cos</code>, <code>tan</code>, <code>asin</code>, <code>acos</code>, <code>atan</code>, <code>sinh</code>, <code>cosh</code>, <code>tanh</code>, <code>asinh</code>, <code>atanh</code></td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">RealFrac</td>
<td class="left"><code>properFraction</code>, <code>truncate</code>, <code>round</code>, <code>ceiling</code>, <code>floor</code></td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">RealFloat</td>
<td class="left"><code>floatRadix</code>, <code>floatDigits</code>, <code>floatRange</code>, <code>decodeFloat</code>, <code>encodeFloat</code>, <code>exponent</code>, <code>significand</code>, <code>scaleFloat</code>, <code>isNaN</code>, <code>isInfinite</code>, <code>isDenormalized</code>, <code>isIEEE</code>, <code>isNegativeZero</code>, <code>atan2</code></td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">Monad</td>
<td class="left"><code>(&gt;&gt;=)</code>, <code>(&gt;&gt;)</code>, <code>return</code>, <code>fail</code></td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">Functor</td>
<td class="left"><code>fmap</code></td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-sec-10-2" class="outline-3">
<h3 id="sec-10-2"><span class="section-number-3">10.2</span> Automatic deriving</h3>
<div class="outline-text-3" id="text-10-2">
<p>
Haskell can automatically derive some  typeclass instances for your data
types (restrictions may apply). E.g.
</p>

<pre class="example">
data Person = Person String Int 
  deriving Eq

p1 = Person "Rick" 50

p2 = Person "Morty" 12

p1 == p2 :: Bool
</pre>
</div>
</div>
<div id="outline-container-sec-10-3" class="outline-3">
<h3 id="sec-10-3"><span class="section-number-3">10.3</span> Show &amp; Read</h3>
<div class="outline-text-3" id="text-10-3">
<p>
<code>Show</code> and <code>Read</code> are two important typeclasses. They implement <code>show</code>
and <code>read</code> and can be automatically derived.
</p>

<pre class="example">
show :: Show a =&gt; a -&gt; String
read :: Read a =&gt; String -&gt; a
</pre>

<p>
That is,  for types with a  <code>Show</code> instance, <code>show</code> will  turn the value
into a <code>String</code>. For types with  a <code>Read</code> instance, <code>read</code> will turn the
<code>String</code> into the value of type <code>a</code>
</p>

<pre class="example">
data Person = Person String Int
  deriving (Eq, Show, Read)

p1 = read "Person \"Rick\" 50" :: Person

show p1 :: String
</pre>

<p>
You should not use <code>read</code> unless you know that the string is valid. An
invalid string will cause a runtime error.
</p>

<p>
for inputs that may fail to parse, use <code>readMaybe</code>
</p>

<pre class="example">
Text.Read.readMaybe :: Read a =&gt; String -&gt; Maybe a
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-11" class="outline-2">
<h2 id="sec-11"><span class="section-number-2">11</span> IO</h2>
<div class="outline-text-2" id="text-11">
</div><div id="outline-container-sec-11-1" class="outline-3">
<h3 id="sec-11-1"><span class="section-number-3">11.1</span> Example: Echoing input line</h3>
<div class="outline-text-3" id="text-11-1">
<p>
Understanding  how IO  works  in  Haskell requires  an  unusual amount  of
background knowledge compared to  other programming languages. It's best
to begin with an example.
</p>

<p>
Haskell executables begin with the main function.
</p>

<pre class="example">
main :: IO ()
main = getLine &gt;&gt;= putStrLn
</pre>

<p>
The types of these functions (often called <b>actions</b>) are
</p>

<pre class="example">
getLine  :: IO String
putStrLn :: String -&gt; IO ()
</pre>

<p>
<code>(&gt;&gt;=)</code> chains them together
</p>

<pre class="example">
(&gt;&gt;=) :: IO a -&gt; (a -&gt; IO b) -&gt; IO b

         ^^^^    ^^^^^^^^^^^    ^^^^
           |          |          |
 getLine --┘          |          |
                      |          └-- main
          putStrLn ---┘
</pre>
</div>
</div>
<div id="outline-container-sec-11-2" class="outline-3">
<h3 id="sec-11-2"><span class="section-number-3">11.2</span> Example: Guess the number</h3>
<div class="outline-text-3" id="text-11-2">
<p>
What if  we want to chain  together two <code>IO a</code>  actions like <code>putStrLn</code>?
Replace the second one with a lambda that ignores its argument.
</p>

<pre class="example">
putStrLn "Hello"    &gt;&gt;=    \_ -&gt; putStrLn "World"

^^^^^^^^^^^^^^^^           ^^^^^^^^^^^^^^^^^^^^^^
       |                              |
     IO a                         a -&gt; IO b
</pre>

<p>
We can make a "guess the number" game with these functions (and <code>randomRIO</code>)
</p>

<pre class="example">
import Text.Read
import System.Random

guessGame :: Int -&gt; IO ()
guessGame n =
  putStrLn "Guess the number (1-10): " &gt;&gt;= \_ -&gt;
  getLine &gt;&gt;= \input -&gt; 
  case readMaybe input of
    Nothing    -&gt; putStrLn "not sure what you just typed!" &gt;&gt;= \_ -&gt;
                  guessGame n
    Just guess -&gt;
      if guess == n
        then putStrLn "You guessed it!"
        else putStrLn "Wrong!" &gt;&gt;= \_ -&gt; 
             guessGame n

main :: IO ()
main = randomIO (1,10) &gt;&gt;= guessGame
</pre>
</div>
</div>
<div id="outline-container-sec-11-3" class="outline-3">
<h3 id="sec-11-3"><span class="section-number-3">11.3</span> Do notation</h3>
<div class="outline-text-3" id="text-11-3">
<p>
Haskell provides a nicer notation of composing IO actions with <code>do</code> notation
</p>

<pre class="example">
import Text.Read
import System.Random

guessGame :: Int -&gt; IO ()
guessGame n = do
  putStrLn "Guess the number (1-10): "
  input &lt;- getLine
  case readMaybe input of
    Nothing -&gt; do putStrLn "not sure what you just typed!"
                  guessGame n
    Just guess -&gt; 
      if read input == n
        then putStrLn "You guessed it!"
        else do putStrLn "Wrong!"
                guessGame n

main :: IO ()
main = do
  n &lt;- randomRIO (1,10)
  guessGame n
</pre>
</div>
</div>
<div id="outline-container-sec-11-4" class="outline-3">
<h3 id="sec-11-4"><span class="section-number-3">11.4</span> Looping</h3>
<div class="outline-text-3" id="text-11-4">
<p>
We can loop with the monadic map <code>mapM_</code>
</p>

<pre class="example">
                         ┌-&lt;-&lt;-&lt;-&lt;-&lt;-&lt;-&lt;-┐
                         |               |
                         v               |

           map  M  _ :: (a -&gt; IO ()) -&gt; [a] -&gt; IO ()

                ^  ^    ^^^^^^^^^^^^    ^^^    ^^^^^
                |  |        |            |       |
                |  |        └-- action   |       └-- no results returned
                |  |            to run   |
works on Monads ┘  |                     |
                   |                     └-- list to run it on
  discards results ┘

^^^^^^^^^^^^^^^^^^^^^
  naming convention
</pre>

<p>
For example, to print the ASCII value of <code>Char</code> from A to Z
</p>

<pre class="example">
main = mapM_ (print . fromEnum) ['A'..'Z']
</pre>

<p>
where
</p>

<pre class="example">
print    :: Show a =&gt; a -&gt; IO ()
fromEnum :: Enum a =&gt; a -&gt; Int
</pre>

<p>
This  type of  looping  is  more limited  than  <code>for  (;;)</code> from  C-like
languages - you  cannot <code>break</code> out of  it for one. Instead  of having a
few general control  structures, Haskell has many  specialized ones, and
the ability to easily write your own.
</p>
</div>
</div>
<div id="outline-container-sec-11-5" class="outline-3">
<h3 id="sec-11-5"><span class="section-number-3">11.5</span> Concurrent IO</h3>
<div class="outline-text-3" id="text-11-5">
<p>
Haskell comes with  light concurrency primitives. So light  in fact that
it might be better to use one  of the abstractions built on top of them,
like the <code>async</code> package:
</p>

<pre class="example">
async :: IO a   -&gt;   IO (Async a) 

         ^^^^        ^^^^^^^^^^^^
          |               |
 computation to run       v
                          |
                          v
                          |
            ┌--&lt;-&lt;-&lt;-&lt;-&lt;--┘
            v
            |
            v
            |
         vvvvvvv

wait  :: Async a   -&gt;   IO a

                        ^^^^
                         |
               result of computation
</pre>

<p>
For example  we can spawn  ten threads that do  some work, wait  for the
results and then print them.
</p>

<pre class="example">
import Control.Concurrent
import Control.Concurrent.Async

main = do
  let worker n = do
        threadDelay (10^6)
        return (n * 2)

  ts &lt;- mapM (async . worker) [1..10]

  results &lt;- mapM wait ts

  mapM_ print results
</pre>

<p>
Note that <code>return</code> is  a function with type <code>a -&gt; IO a</code>.  It has no flow
control meaning  like in many  languages. It's simply turning  the <code>Int</code>
into an <code>IO Int</code>.
</p>
</div>
</div>
</div>
<div id="outline-container-sec-12" class="outline-2">
<h2 id="sec-12"><span class="section-number-2">12</span> More</h2>
<div class="outline-text-2" id="text-12">
<ul class="org-ul">
<li><a href="https://www.haskell.org/tutorial/">https://www.haskell.org/tutorial/</a> - A  Gentle Introduction to Haskell,
Version 98 (slightly misleading title)
</li>

<li><a href="https://www.haskell.org/ghc/docs/latest/html/libraries/index.html">https://www.haskell.org/ghc/docs/latest/html/libraries/index.html</a>    -
Documentation for the libraries that come with GHC
</li>

<li><a href="http://book.realworldhaskell.org/">http://book.realworldhaskell.org/</a> - Real World Haskell
</li>

<li><a href="http://community.haskell.org/~simonmar/pcph/">http://community.haskell.org/~simonmar/pcph/</a> - Parallel and Concurrent
Programming in Haskell
</li>

<li><a href="https://en.wikibooks.org/wiki/Haskell">https://en.wikibooks.org/wiki/Haskell</a> Haskell Wikibook
</li>
</ul>

<hr  />
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="author">Author: Denis Volk</p>
<p class="date">Created: 2014-04-23 Wed 13:03</p>
<p class="creator"><a href="http://www.gnu.org/software/emacs/">Emacs</a> 24.3.1 (<a href="http://orgmode.org">Org</a> mode 8.2.4)</p>
<p class="validation"><a href="http://validator.w3.org/check?uri=referer">Validate</a></p>
</div>
</body>
</html>
